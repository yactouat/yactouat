name: cd
on:
  push:
    branches: ["dev/vps"]

jobs:
  # TODO update for VPS (repo steps in Dockerfile)
  prep-sys-deps:
    name: prep-sys-deps
    runs-on: ubuntu-latest
    steps:
    - name: prepping system dependencies on remote host
      uses: appleboy/ssh-action@v1.0.1
      env:
        DEBIAN_FRONTEND: "noninteractive"
      with:
        host: ${{ secrets.SSH_HOST }}
        key: ${{ secrets.SSH_PRIV_KEY }}
        port: ${{ secrets.SSH_PORT }}
        username: root
        script_stop: true
        script: |
            systemd-tmpfiles --create --remove --clean
            apt update -y
            apt upgrade -y
            apt install -y postgresql php libapache2-mod-php curl git libpq-dev unzip wget zip
            apt autoremove
            systemctl restart postgresql.service
            sleep 5

  # build-publish-deploy:
  #   name: CD
  #   runs-on: ubuntu-latest
    # steps:

      # # checkout the code
      # - name: Checkout
      #   uses: actions/checkout@main

      # # log in to the GCP Artifact Registry
      # - name: Login to GAR
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ secrets.GCP_REGION }}-docker.pkg.dev
      #     username: _json_key
      #     password: ${{ secrets.GCP_SA }}

      # # build and push the Docker image
      # - id: docker-push-tagged
      #   name: Tag Docker image and push to Google Artifact Registry
      #   uses: docker/build-push-action@v3
      #   with:
      #     file: ./Docker/php-apache.Dockerfile
      #     context: .
      #     push: true
      #     tags: |
      #       ${{ secrets.GCP_ARTIFACT_REPO }}php-apache:${{ github.sha }}

      # # setup gcloud CLI
      # - id: "auth"
      #   uses: "google-github-actions/auth@v1"
      #   with:
      #     credentials_json: "${{ secrets.GCP_SA }}"

      # # wait for the image to be available in the registry
      # - name: "sleep"
      #   run: 'sleep 5'

      # # deploy the image to Cloud Run
      # - id: "deploy"
      #   uses: "google-github-actions/deploy-cloudrun@v1"
      #   with:
      #     service: "php-apache"
      #     image: "${{ secrets.GCP_ARTIFACT_REPO }}php-apache:${{ github.sha }}"
      #     flags: "--port=80"
      #     region: "${{ secrets.GCP_REGION }}"
      #     # make sure cert paths are correct
      #     env_vars: |
      #       GOOGLE_CLOUD_STORAGE_KEY_FILE=${{ secrets.GOOGLE_CLOUD_STORAGE_KEY_FILE_PATH }}
      #       POSTGRES_CRT_PATH=${{ secrets.POSTGRES_CRT_PATH }}
      #       ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
      #       ADMIN_NAME=${{ secrets.ADMIN_NAME }}
      #       ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
      #       APP_ENV=${{ secrets.APP_ENV }}
      #       APP_KEY=${{ secrets.APP_KEY }}
      #       APP_NAME=${{ secrets.APP_NAME }}
      #       APP_URL=${{ secrets.APP_URL }}
      #       CACHE_DRIVER=redis
      #       DB_CONNECTION=pgsql
      #       DB_DATABASE=${{ secrets.DB_DATABASE }}
      #       DB_HOST=${{ secrets.DB_HOST }}
      #       DB_PASSWORD=${{ secrets.DB_PASSWORD }}
      #       DB_PORT=${{ secrets.DB_PORT }}
      #       DB_USERNAME=${{ secrets.DB_USERNAME }}
      #       GOOGLE_CLOUD_STORAGE_BUCKET=${{ secrets.GOOGLE_CLOUD_STORAGE_BUCKET }}
      #       FILESYSTEM_DISK=gcp
      #       MAIL_MAILER=sendgrid
      #       SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
      #       REDIS_CLIENT=predis
      #       REDIS_CONN_STR=${{ secrets.REDIS_CONN_STR }}
      #       REDIS_HOST=${{ secrets.REDIS_HOST }}
      #       REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
      #       REDIS_PORT=${{ secrets.REDIS_PORT }}
      #       REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
      #       SESSION_DRIVER=redis
      #     secrets: |
      #       ${{ secrets.POSTGRES_CRT_PATH }}=${{ secrets.POSTGRES_CRT_SECRET }}
      #       ${{ secrets.GOOGLE_CLOUD_STORAGE_KEY_FILE_PATH }}=${{ secrets.GOOGLE_CLOUD_STORAGE_KEY_FILE_SECRET }}

      # # showing the URL of the deployed service
      # - name: "deploy output"
      #   run: 'curl "${{ steps.deploy.outputs.url }}"'