name: cd
on:
  push:
    branches: ["dev/vps"]

jobs:
  prep-sys-deps:
    name: prep-sys-deps
    runs-on: ubuntu-latest
    steps:
    - name: prepping system dependencies on remote host
      uses: appleboy/ssh-action@v1.0.1
      env:
        DEBIAN_FRONTEND: "noninteractive"
      with:
        host: ${{ secrets.SSH_HOST }}
        key: ${{ secrets.SSH_PRIV_KEY }}
        port: ${{ secrets.SSH_PORT }}
        username: root
        script_stop: true
        script: |
            systemd-tmpfiles --create --remove --clean
            apt update -y
            apt upgrade -y
            apt install -y postgresql git libpq-dev unzip wget zip
            apt autoremove
            wget https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.3.2-linux-x86-64.tar.gz \
              && tar -xzf libwebp-1.3.2-linux-x86-64.tar.gz \
              && cp libwebp-1.3.2-linux-x86-64/bin/dwebp /usr/local/bin/dwebp \
              && cp libwebp-1.3.2-linux-x86-64/bin/cwebp /usr/local/bin/cwebp \
              && rm -rf libwebp-1.3.2-linux-x86-64 \
              && rm libwebp-1.3.2-linux-x86-64.tar.gz
            systemctl restart postgresql.service
            sleep 5

  # ! from here on make sure you ran all admin commands on the server beforehand

  copy-app-files:
    name: copy-app-files
    needs: prep-sys-deps
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: copy PHP app' files via ssh key
      uses: appleboy/scp-action@v0.1.6
      with:
        host: ${{ secrets.SSH_HOST }}
        key: ${{ secrets.SSH_PRIV_KEY }}
        port: ${{ secrets.SSH_PORT }}
        username: yactouat
        source: "*"
        target: /var/www/html

  deploy-app:
    name: deploy-app
    needs: copy-app-files
    runs-on: ubuntu-latest
    steps:
    - name: deploy-app
      uses: appleboy/ssh-action@v1.0.1
      env:
        GOOGLE_CLOUD_STORAGE_KEY_FILE: gcp-storage-creds.json
        ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
        ADMIN_NAME: ${{ secrets.ADMIN_NAME }}
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        APP_ENV: ${{ secrets.APP_ENV }}
        APP_KEY: ${{ secrets.APP_KEY }}
        APP_NAME: ${{ secrets.APP_NAME }}
        APP_URL: ${{ secrets.APP_URL }}
        CACHE_DRIVER: redis
        DB_CONNECTION: pgsql
        DB_DATABASE: ${{ secrets.DB_DATABASE }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        GOOGLE_CLOUD_STORAGE_BUCKET: ${{ secrets.GOOGLE_CLOUD_STORAGE_BUCKET }}
        FILESYSTEM_DISK: gcp
        MAIL_MAILER: sendgrid
        SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        REDIS_CLIENT: predis
        REDIS_CONN_STR: ${{ secrets.REDIS_CONN_STR }}
        SESSION_DRIVER: redis
      with:
        host: ${{ secrets.SSH_HOST }}
        key: ${{ secrets.SSH_PRIV_KEY }}
        port: ${{ secrets.SSH_PORT }}
        username: yactouat
        script_stop: true
        envs: GOOGLE_CLOUD_STORAGE_KEY_FILE,ADMIN_EMAIL,ADMIN_NAME,ADMIN_PASSWORD,APP_ENV,APP_KEY,APP_NAME,APP_URL,CACHE_DRIVER,DB_CONNECTION,DB_DATABASE,DB_HOST,DB_PASSWORD,DB_PORT,DB_USERNAME,GOOGLE_CLOUD_STORAGE_BUCKET,FILESYSTEM_DISK,MAIL_MAILER,SENDGRID_API_KEY,REDIS_CLIENT,REDIS_CONN_STR,SESSION_DRIVER
        script: |
            cd /var/www/html
            cp .env.example .env
            # emptying .env file
            > .env
            echo "GOOGLE_CLOUD_STORAGE_KEY_FILE=$GOOGLE_CLOUD_STORAGE_KEY_FILE" >> .env
            echo "ADMIN_EMAIL=$ADMIN_EMAIL" >> .env
            echo "ADMIN_NAME=$ADMIN_NAME" >> .env
            echo "ADMIN_PASSWORD=$ADMIN_PASSWORD" >> .env
            echo "APP_ENV=$APP_ENV" >> .env
            echo "APP_KEY=$APP_KEY" >> .env
            echo "APP_NAME=$APP_NAME" >> .env
            echo "APP_URL=$APP_URL" >> .env
            echo "CACHE_DRIVER=$CACHE_DRIVER" >> .env
            echo "DB_CONNECTION=$DB_CONNECTION" >> .env
            echo "DB_DATABASE=$DB_DATABASE" >> .env
            echo "DB_HOST=$DB_HOST" >> .env
            echo "DB_PASSWORD=$DB_PASSWORD" >> .env
            echo "DB_PORT=$DB_PORT" >> .env
            echo "DB_USERNAME=$DB_USERNAME" >> .env
            echo "GOOGLE_CLOUD_STORAGE_BUCKET=$GOOGLE_CLOUD_STORAGE_BUCKET" >> .env
            echo "FILESYSTEM_DISK=$FILESYSTEM_DISK" >> .env
            echo "MAIL_MAILER=$MAIL_MAILER" >> .env
            echo "SENDGRID_API_KEY=$SENDGRID_API_KEY" >> .env
            echo "REDIS_CLIENT=$REDIS_CLIENT" >> .env
            echo "REDIS_CONN_STR=$REDIS_CONN_STR" >> .env
            echo "SESSION_DRIVER=$SESSION_DRIVER" >> .env
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php composer-setup.php
            php -r "unlink('composer-setup.php');"
            php composer.phar install --no-dev
            rm composer.phar
            php artisan config:clear
            php artisan migrate --force && php artisan db:seed --force && php ./scripts/clear-cache.php

  set-permissions-after-deploy:
    name: set-permissions-after-deploy
    needs: deploy-app
    runs-on: ubuntu-latest
    steps:
    - name: setting permissions on remote host after deploy
      uses: appleboy/ssh-action@v1.0.1
      env:
        DEBIAN_FRONTEND: "noninteractive"
      with:
        host: ${{ secrets.SSH_HOST }}
        key: ${{ secrets.SSH_PRIV_KEY }}
        port: ${{ secrets.SSH_PORT }}
        username: root
        script_stop: true
        script: |
          cd /var/www/html
          chown -R yactouat:www-data .
          # find files then change permissions to "read and write" for owner and group, and "read" for others
          find . -type f -exec chmod 664 {} \; 
          # find directories then change permissions to "read, write and execute" for owner and group, and "read and execute" for others
          find . -type d -exec chmod 775 {} \;
          chgrp -R www-data storage bootstrap/cache
          chmod -R ug+rwx storage bootstrap/cache